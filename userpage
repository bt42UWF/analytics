
$(document).ready(function() {
    let responseCodeChart, exceptionCodeChart;
    const responseCodeChartCtx = document.getElementById('responseCodeChart').getContext('2d');
    const exceptionCodeChartCtx = document.getElementById('exceptionCodeChart').getContext('2d');

    function initializeWithData(apiData) {
        // Populate metric boxes
        $('#apiCallCountMetric').text(apiData.totalCallCount);
        $('#apiErrorRateMetric').text(apiData.totalErrorRate + '%');

        // Populate API Logs DataTable
        $('#apiLogsTable').DataTable({
            data: apiData.apiLogs,
            columns: [
                { title: 'Date', data: 'date' },
                { title: 'Request', data: 'request' },
                { title: 'Response Code', data: 'responseCode' },
                { title: 'Data Source', data: 'dataSource' }
            ],
            destroy: true // Allows reinitialization
        });

        // Populate Exception Logs DataTable
        $('#exceptionLogsTable').DataTable({
            data: apiData.exceptionLogs,
            columns: [
                { title: 'Date', data: 'date' },
                { title: 'Exception', data: 'exception' },
                { title: 'Status', data: 'status' },
                { title: 'Data Source', data: 'dataSource' }
            ],
            destroy: true
        });
    }

    function getCounts(logs, key) {
        const counts = {};
        logs.forEach(log => {
            counts[log[key]] = (counts[log[key]] || 0) + 1;
        });
        return counts;
    }

    function createPieChart(ctx, counts) {
        return new Chart(ctx, {
            type: 'pie',
            data: {
                labels: Object.keys(counts),
                datasets: [{
                    data: Object.values(counts),
                    backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40'],
                    borderColor: '#ffffff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top'
                    }
                }
            }
        });
    }

    function createBarChart(ctx, counts) {
        return new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Object.keys(counts),
                datasets: [{
                    data: Object.values(counts),
                    backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40'],
                    borderColor: '#ffffff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top'
                    }
                }
            }
        });
    }

    function updateMetricBars(selectedDataSource, apiData) {
        if (selectedDataSource === 'SpectreWeb.API') {
            $('#apiCallCountMetric').text(apiData.apiCallCount);
            $('#apiErrorRateMetric').text(apiData.apiErrorRate + '%');
        } else if (selectedDataSource === 'SpectreWeb.UI') {
            $('#apiCallCountMetric').text(apiData.uiCallCount);
            $('#apiErrorRateMetric').text(apiData.uiErrorRate + '%');
        } else {
            $('#apiCallCountMetric').text(apiData.totalCallCount);
            $('#apiErrorRateMetric').text(apiData.totalErrorRate + '%');
        }
    }

    function updateCharts(selectedDataSource, apiData) {
        let filteredApiLogs = apiData.apiLogs;
        let filteredExceptionLogs = apiData.exceptionLogs;

        if (selectedDataSource === 'SpectreWeb.API') {
            filteredApiLogs = apiData.apiLogs.filter(log => log.dataSource === 'SpectreWeb.API');
            filteredExceptionLogs = apiData.exceptionLogs.filter(log => log.dataSource === 'SpectreWeb.API');
        } else if (selectedDataSource === 'SpectreWeb.UI') {
            filteredApiLogs = apiData.apiLogs.filter(log => log.dataSource === 'SpectreWeb.UI');
            filteredExceptionLogs = apiData.exceptionLogs.filter(log => log.dataSource === 'SpectreWeb.UI');
        }

        responseCodeChart.data = {
            labels: Object.keys(getCounts(filteredApiLogs, 'responseCode')),
            datasets: [{
                data: Object.values(getCounts(filteredApiLogs, 'responseCode')),
                backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40']
            }]
        };
        responseCodeChart.update();

        exceptionCodeChart.data = {
            labels: Object.keys(getCounts(filteredExceptionLogs, 'exception')),
            datasets: [{
                data: Object.values(getCounts(filteredExceptionLogs, 'exception')),
                backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40']
            }]
        };
        exceptionCodeChart.update();
    }

    // Initial AJAX call to fetch data from your API
    $.ajax({
        url: '/Analytics/AnalyticsLogs_GET',
        type: 'GET',
        dataType: 'json',
        success: function(data) {
            const apiData = {
                apiLogs: data.apiLogs,
                exceptionLogs: data.exceptionLogs,
                apiCallCount: data.apiCallCount,
                apiErrorRate: data.apiErrorRate,
                uiErrorRate: data.uiErrorRate,
                totalErrorRate: data.totalErrorRate,
                totalCallCount: data.totalCallCount,
                uiCallCount: data.uiCallCount
            };

            // Initialize components with API data
            initializeWithData(apiData);

            // Create initial charts
            responseCodeChart = createPieChart(responseCodeChartCtx, getCounts(apiData.apiLogs, 'responseCode'));
            exceptionCodeChart = createBarChart(exceptionCodeChartCtx, getCounts(apiData.exceptionLogs, 'exception'));

            // Dropdown event listener
            $('.dropdown-item').on('click', function(event) {
                event.preventDefault();
                const selectedDataSource = $(this).data('source');
                $('#dataSourceDropdown').text($(this).text());

                // Update metrics, DataTables, and charts based on selection
                updateMetricBars(selectedDataSource, apiData);
                updateCharts(selectedDataSource, apiData);

                // Filter DataTable by selected data source
                $('#apiLogsTable').DataTable().column(3).search(selectedDataSource === 'all' ? '' : selectedDataSource).draw();
                $('#exceptionLogsTable').DataTable().column(3).search(selectedDataSource === 'all' ? '' : selectedDataSource).draw();
            });
        },
        error: function(err) {
            console.error('Error fetching data:', err);
        }
    });
});





function loadData(){
    $.ajax({
        url: '/Analytics/AnalyticsLogs_GET',
        type: 'GET',
        dataType: 'json',
        success: function(data) {
           const apiLogs = data.apiLogs;
            const exceptionLogs = data.exceptionlogs;
            const apiCallCount = data.apiCallCount;
            const apiErrorRate = data.apiErrorRate;
            const uiErrorRate = data.uiErrorRate;
            const totalErrorRate = data.totalErrorRate;
            const totalCallCount = data.totalCallCount;
            const uiCallCount = data.uiCallCount;

            // Update metric boxes
            $('#apiCallCountMetric').text(totalCallCount);
            $('#apiErrorRateMetric').text(totalErrorRate + '%');
          
}

funciton populateTables(){
     $('#apiLogsTable').DataTable({
            data: apiLogs,
            columns: [
                { title: 'Date', data: 'date' },
                { title: 'Request', data: 'request' },
                { title: 'Response Code', data: 'responseCode' },
                { title: 'Data Source', data: 'dataSource' }
            ],
            destroy: true
        });

        // Initialize Exception Logs DataTable
        $('#exceptionLogsTable').DataTable({
            data: exceptionLogs,
            columns: [
                { title: 'Date', data: 'date' },
                { title: 'Exception', data: 'exception' },
                { title: 'Response Code', data: 'responseCode' },
                { title: 'Data Source', data: 'dataSource' }
            ],
            destroy: true
        });
    }

function initCharts(){
       const apiCtx = document.getElementById('responseCodeChart').getContext('2d');
            new Chart(apiCtx, {
                type: 'pie',
                data: {
                    labels: apiLabels,
                    datasets: [{
                        label: 'API Response Codes',
                        data: apiData,
                        backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40'],
                        borderColor: '#ffffff',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });

            // Prepare data for the Exception logs response codes pie chart
            const exceptionResponseCodes = countResponseCodes(exceptionLogs);
            const exceptionLabels = Object.keys(exceptionResponseCodes);
            const exceptionData = Object.values(exceptionResponseCodes);

            // Exception Logs Response Codes Pie Chart
            const exceptionCtx = document.getElementById('exceptionCodeChart').getContext('2d');
            new Chart(exceptionCtx, {
                type: 'bar',
                data: {
                    labels: exceptionLabels,
                    datasets: [{
                        label: 'Exception Response Codes',
                        data: exceptionData,
                        backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40'],
                        borderColor: '#ffffff',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });
        },
    }

function updateCharts(){
    if exceptionCtx
    exceptionCtx.destroy()
    if apiCtx
    apiCtx.destroy()
    const apiCtx = document.getElementById('responseCodeChart').getContext('2d');
            new Chart(apiCtx, {
                type: 'pie',
                data: {
                    labels: apiLabels,
                    datasets: [{
                        label: 'API Response Codes',
                        data: apiData,
                        backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40'],
                        borderColor: '#ffffff',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });

            // Prepare data for the Exception logs response codes pie chart
            const exceptionResponseCodes = countResponseCodes(exceptionLogs);
            const exceptionLabels = Object.keys(exceptionResponseCodes);
            const exceptionData = Object.values(exceptionResponseCodes);

            // Exception Logs Response Codes Pie Chart
            const exceptionCtx = document.getElementById('exceptionCodeChart').getContext('2d');
            new Chart(exceptionCtx, {
                type: 'bar',
                data: {
                    labels: exceptionLabels,
                    datasets: [{
                        label: 'Exception Response Codes',
                        data: exceptionData,
                        backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40'],
                        borderColor: '#ffffff',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    }
                }
            });
        },
    }

}

}

$(document).on('click', '.dropdown-item', function (e) {
    e.preventDefault();

    const selectedSource = $(this).data('source'); // Get the selected source from the dropdown

    // Filter logs based on the selected source
    const filteredApiLogs = selectedSource === "All" || !selectedSource 
        ? apiLogs 
        : apiLogs.filter(log => log.dataSource === selectedSource);

    const filteredExceptionLogs = selectedSource === "All" || !selectedSource 
        ? exceptionLogs 
        : exceptionLogs.filter(log => log.dataSource === selectedSource);

    console.log('Filtered API Logs:', filteredApiLogs); // Debugging output
    console.log('Filtered Exception Logs:', filteredExceptionLogs); // Debugging output

    // Update the charts with the filtered data
    initCharts(filteredApiLogs, filteredExceptionLogs);

    // Update dropdown text
    $('#filterDropdown').text(`Filter: ${selectedSource}`);
});

